Breadth First Search [BFS]
* Always start from 0

Graph 1

        0 ----- 1
        |
        |
3 ----- 2
        |
        |
        4

order 0, 1, 2, 3, 4
order 0 2 1 4 3



GRAPH 2:
start 0

5 ---- 0 ----- 1 ---- 2 ----6
       |       |
       |       |
       |       |
       4       3

first traverse 1 distance from source node

order 0 1 4 5 3 2 6


GRAPH 3
start 0

    1 -------------- 0
    |                |
    |                |
    |                |
    |                |
    |                |
    2 -------------- 3 ------ 7
                     |
                     |
                     |
                     6

order : 0 1 3 2 6 7

'2' is connected with both 3 and 1, so 2 will comes two
times while traversal that's visited, it's take care of
visited node



#Implementation

Queue => FIFO => First In First Out

Why Queue Data structure

1 ----- 0 ----- 5
        |
        |
  3 ----2
  |
  |
  4

Adjacency_List:
0 => 1 5 2
1 => 0
2 => 0 3
5 => 0
3 => 2 4
4 => 3

Visited array

visited: [0, 1, 5, 2, 3, 4]
order: [0, 1, 5, 2, 3, 4]

Starting node 0 and push into visited
queue => 0
pop the 0 push all it's neighbours in queue and in visited
queue => 1 5 2

pop the 1 push all it's neighbours in queue and in visited
queue => 5 2

pop the 5 push all it's neighbours in queue and in visited
queue =>  2

pop the 2 push all it's neighbours in queue and in visited
queue =>  3

pop the 3 push all it's neighbours in queue and in visited
queue =>  4

pop 4 there is no node left which is not visited


Algo:
* queue -> source node -> mark as visited

* while queue is not empty
  - pop front node
  - traverse it's neighbours and mark as visited




